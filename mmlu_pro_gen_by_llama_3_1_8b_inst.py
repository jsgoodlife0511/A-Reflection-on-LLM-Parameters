# -*- coding: utf-8 -*-
"""MMLU-Pro_gen_by_Llama-3.1-8B-Inst.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TqiWWUtkLs7lgdV3schBt1QqBr1Rw4dn
"""

!pip install -q git+https://github.com/vllm-project/vllm.git

from transformers import AutoTokenizer, AutoModelForCausalLM
from datasets import load_dataset
from vllm import LLM, SamplingParams
import argparse, os, json

def load_model(repo):
    return LLM(model=repo, tensor_parallel_size=1)

def save_json(data, save_dir, path):
    os.makedirs(save_dir, exist_ok=True)
    with open(os.path.join(save_dir, path), 'w', encoding='utfâ€‘8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

def apply_MCQA_prompt(prompt, questions, options):
    formatted = []
    for q, opts in zip(questions, options): # Option formatting. Ex) A. Paris, B. Berlin, ...
        opts_fmt = "\n".join([f"{chr(65+i)}. {o}" for i, o in enumerate(opts)])
        formatted.append(prompt.format(question=q, options=opts_fmt))
    return formatted

def generate_outputs(dataset_name, prompts, questions, model, sampling_params, save_dir, model_name):
    outputs = model.generate(prompts, sampling_params)
    results = [{'question': q, 'answer': out.outputs[0].text} for q, out in zip(questions, outputs)]
    # out.outputs[0]: The first generated answer candidate, out.outputs[0].text: The text string of the answer
    save_json(results, save_dir, f"{model_name}-{dataset_name}.json")

def main(args):
    model = load_model(args.model)
    prompt_template = "Question: {question}\nOptions:\n{options}\nAnswer:"
    sampling_params = SamplingParams(temperature=0.0, max_tokens=64)

    dataset = load_dataset("TIGER-Lab/MMLU-Pro")['test']
    questions = dataset['question']
    options = dataset['options']
    prompts = apply_MCQA_prompt(prompt_template, questions, options)

    generate_outputs("MMLU-Pro", prompts, questions, model, sampling_params, args.save_dir, args.model)

if __name__ == "__main__":
    parser = argparse.ArgumentParser() # Prepare a parser
    parser.add_argument('--model', type=str, default="meta-llama/Llama-3.1-8B-Instruct")
    parser.add_argument('--save_dir', type=str, default="outputs")
    args = parser.parse_args()
    #print(args.model) # Check if the model name is stored correctly
    main(args)